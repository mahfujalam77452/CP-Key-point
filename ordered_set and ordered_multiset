we can use ordered_set and ordered multiset. When we need to  know the number of greater/smaller
element of a number in a set/multiset. when we want to insert this number.
As a great example we can see the problem Codeforces Round 790 (Div. 4), problem: (H2) .
The solution of this problme is:-
#include<bits/stdc++.h>
using namespace std;
// for policy based data structures
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
// ordered_set: extends set to find_by_order and order_of_key
typedef tree<long long, null_type, less<long long>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef tree<long long, null_type, less_equal<long long>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;

#define    ll   long long int

//map<ll, ll> m;
ll i,j,k;
int main()
{
    int tc;
    cin >> tc;
    while(tc--)
    {
       ll n, x, ans=0;
        cin >> n;
        ordered_multiset s;
        for(i=0; i<n; i++) {
          cin >> x;
          ans += s.size() - s.order_of_key(x);
          //cout << (s.size() - s.order_of_key(in)) << ' ' << s.size() << ' ' << s.order_of_key(in) << endl;
          //for(auto it:s) cout << it << ' '; cout << endl;
          s.insert(x);
        }

        cout << ans << endl;
    }

    //for(auto it:s)  cout << it << ' '; cout << endl;
}
